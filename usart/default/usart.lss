
usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000064  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000034a  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b2  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000295  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000128  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000099  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000c65  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e8       	ldi	r30, 0x8A	; 138
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 37       	cpi	r26, 0x7E	; 126
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ae e7       	ldi	r26, 0x7E	; 126
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 37       	cpi	r26, 0x7E	; 126
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	4d d0       	rcall	.+154    	; 0xf4 <main>
  5a:	95 c0       	rjmp	.+298    	; 0x186 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <usart_init>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

#include <avr/io.h>
#include <util/delay.h>

void usart_init(){
  5e:	8a b1       	in	r24, 0x0a	; 10
  60:	88 61       	ori	r24, 0x18	; 24
  62:	8a b9       	out	0x0a, r24	; 10
   
  UCSRB |= (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
  UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
  64:	80 b5       	in	r24, 0x20	; 32
  66:	86 68       	ori	r24, 0x86	; 134
  68:	80 bd       	out	0x20, r24	; 32

  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  6a:	8c e0       	ldi	r24, 0x0C	; 12
  6c:	89 b9       	out	0x09, r24	; 9
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
  6e:	10 bc       	out	0x20, r1	; 32
}
  70:	08 95       	ret

00000072 <usart_putch>:
void usart_putch(unsigned char send){
  72:	5d 9b       	sbis	0x0b, 5	; 11
  74:	fe cf       	rjmp	.-4      	; 0x72 <usart_putch>

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
  UDR = send; // Send the byte 
  76:	8c b9       	out	0x0c, r24	; 12
}
  78:	08 95       	ret

0000007a <usart_getch>:
unsigned char usart_getch(){
  7a:	5f 9b       	sbis	0x0b, 7	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <usart_getch>

  while ((UCSRA & (1 << RXC)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
  return(UDR); // return the byte
  7e:	8c b1       	in	r24, 0x0c	; 12
}
  80:	08 95       	ret

00000082 <usart_puts>:
void usart_puts(unsigned char *stringptr)
{
  82:	fc 01       	movw	r30, r24
  84:	04 c0       	rjmp	.+8      	; 0x8e <usart_puts+0xc>
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
  86:	5d 9b       	sbis	0x0b, 5	; 11
  88:	fe cf       	rjmp	.-4      	; 0x86 <usart_puts+0x4>
  UDR = send; // Send the byte 
  8a:	8c b9       	out	0x0c, r24	; 12
void usart_puts(unsigned char *stringptr)
{
   while (*stringptr != 0x00)
   {
      usart_putch(*stringptr);
      stringptr++;
  8c:	31 96       	adiw	r30, 0x01	; 1
  while ((UCSRA & (1 << RXC)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
  return(UDR); // return the byte
}
void usart_puts(unsigned char *stringptr)
{
   while (*stringptr != 0x00)
  8e:	80 81       	ld	r24, Z
  90:	88 23       	and	r24, r24
  92:	c9 f7       	brne	.-14     	; 0x86 <usart_puts+0x4>
   {
      usart_putch(*stringptr);
      stringptr++;
   }
}
  94:	08 95       	ret

00000096 <puthex>:

void puthex( unsigned char data )
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	60 97       	sbiw	r28, 0x10	; 16
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	98 2f       	mov	r25, r24
  unsigned char ascii[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	ee e6       	ldi	r30, 0x6E	; 110
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	e1 f7       	brne	.-8      	; 0xb6 <puthex+0x20>
  usart_putch(ascii[(data >> 4) & 0x0F]);
  be:	89 2f       	mov	r24, r25
  c0:	82 95       	swap	r24
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	fe 01       	movw	r30, r28
  c6:	e8 0f       	add	r30, r24
  c8:	f1 1d       	adc	r31, r1
  ca:	81 81       	ldd	r24, Z+1	; 0x01
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
  cc:	5d 9b       	sbis	0x0b, 5	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <puthex+0x36>
  UDR = send; // Send the byte 
  d0:	8c b9       	out	0x0c, r24	; 12

void puthex( unsigned char data )
{
  unsigned char ascii[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
  usart_putch(ascii[(data >> 4) & 0x0F]);
  usart_putch(ascii[data & 0x0F]);
  d2:	9f 70       	andi	r25, 0x0F	; 15
  d4:	fe 01       	movw	r30, r28
  d6:	e9 0f       	add	r30, r25
  d8:	f1 1d       	adc	r31, r1
  da:	81 81       	ldd	r24, Z+1	; 0x01
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <puthex+0x46>
  UDR = send; // Send the byte 
  e0:	8c b9       	out	0x0c, r24	; 12
void puthex( unsigned char data )
{
  unsigned char ascii[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
  usart_putch(ascii[(data >> 4) & 0x0F]);
  usart_putch(ascii[data & 0x0F]);
}
  e2:	60 96       	adiw	r28, 0x10	; 16
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <main>:

int main (void)
{
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2e 97       	sbiw	r28, 0x0e	; 14
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
  unsigned char ReceivedByte;
  unsigned char str[] = "I am working.";
 10e:	de 01       	movw	r26, r28
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	e0 e6       	ldi	r30, 0x60	; 96
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	8e e0       	ldi	r24, 0x0E	; 14
 118:	01 90       	ld	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x24>
#include <avr/io.h>
#include <util/delay.h>

void usart_init(){
   
  UCSRB |= (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	88 61       	ori	r24, 0x18	; 24
 124:	8a b9       	out	0x0a, r24	; 10
  UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
 126:	80 b5       	in	r24, 0x20	; 32
 128:	86 68       	ori	r24, 0x86	; 134
 12a:	80 bd       	out	0x20, r24	; 32

  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	89 b9       	out	0x09, r24	; 9
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 130:	10 bc       	out	0x20, r1	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 132:	88 ea       	ldi	r24, 0xA8	; 168
 134:	91 e6       	ldi	r25, 0x61	; 97
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x42>
 13a:	fe 01       	movw	r30, r28
 13c:	03 c0       	rjmp	.+6      	; 0x144 <main+0x50>
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <main+0x4a>
  UDR = send; // Send the byte 
 142:	8c b9       	out	0x0c, r24	; 12
void usart_puts(unsigned char *stringptr)
{
   while (*stringptr != 0x00)
   {
      usart_putch(*stringptr);
      stringptr++;
 144:	31 96       	adiw	r30, 0x01	; 1
  while ((UCSRA & (1 << RXC)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
  return(UDR); // return the byte
}
void usart_puts(unsigned char *stringptr)
{
   while (*stringptr != 0x00)
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	c9 f7       	brne	.-14     	; 0x13e <main+0x4a>
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 14c:	5d 9b       	sbis	0x0b, 5	; 11
 14e:	fe cf       	rjmp	.-4      	; 0x14c <main+0x58>
  UDR = send; // Send the byte 
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	8c b9       	out	0x0c, r24	; 12
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 154:	5d 9b       	sbis	0x0b, 5	; 11
 156:	fe cf       	rjmp	.-4      	; 0x154 <main+0x60>
  UDR = send; // Send the byte 
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	8c b9       	out	0x0c, r24	; 12
}
unsigned char usart_getch(){

  while ((UCSRA & (1 << RXC)) == 0) {}; // Do nothing until data have been recieved and is ready to be read from UDR
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	f8 2e       	mov	r15, r24
 160:	0d e0       	ldi	r16, 0x0D	; 13
 162:	1a e0       	ldi	r17, 0x0A	; 10
 164:	5f 9b       	sbis	0x0b, 7	; 11
 166:	fe cf       	rjmp	.-4      	; 0x164 <main+0x70>
  return(UDR); // return the byte
 168:	8c b1       	in	r24, 0x0c	; 12
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 16a:	5d 9b       	sbis	0x0b, 5	; 11
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x76>
  UDR = send; // Send the byte 
 16e:	8c b9       	out	0x0c, r24	; 12
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 170:	5d 9b       	sbis	0x0b, 5	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <main+0x7c>
  UDR = send; // Send the byte 
 174:	fc b8       	out	0x0c, r15	; 12
  while(1) // Loop forever
  {
    ReceivedByte = usart_getch();
	usart_putch(ReceivedByte);
	usart_putch(' ');
	puthex(ReceivedByte);
 176:	8f df       	rcall	.-226    	; 0x96 <puthex>
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 178:	5d 9b       	sbis	0x0b, 5	; 11
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0x84>
  UDR = send; // Send the byte 
 17c:	0c b9       	out	0x0c, r16	; 12
  UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send){

  while ((UCSRA & (1 << UDRE)) == 0) {}; // Do nothing until UDR is ready for more data to be written to it
 17e:	5d 9b       	sbis	0x0b, 5	; 11
 180:	fe cf       	rjmp	.-4      	; 0x17e <main+0x8a>
  UDR = send; // Send the byte 
 182:	1c b9       	out	0x0c, r17	; 12
 184:	ef cf       	rjmp	.-34     	; 0x164 <main+0x70>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
